<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git 基操</title>
    <url>/2024/07/23/git-basic-operations/</url>
    <content><![CDATA[<h1 id="初始化设定">初始化设定</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&#x27;your name&#x27;</span></span><br><span class="line">git config --<span class="built_in">local</span> user.email <span class="string">&#x27;hello@example.com&#x27;</span></span><br><span class="line"></span><br><span class="line">git config --<span class="built_in">local</span> core.sshCommand <span class="string">&quot;ssh -i ~/.ssh/private_key&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global core.editor <span class="string">&quot;vim&quot;</span></span><br><span class="line">git config --global merge.tool <span class="string">&quot;vimdiff&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持中文路径查看</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="克隆-github-私有仓库">克隆 GitHub 私有仓库</h1>
<p>这里假设已经将公钥上传至 GitHub 帐号.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --config core.sshCommand=<span class="string">&#x27;ssh -i ~/.ssh/your_private_key&#x27;</span> \</span><br><span class="line">    git@github.com:/username/private-repo</span><br></pre></td></tr></table></figure>
<h1 id="安装">安装</h1>
<p><a href="https://git-scm.com/downloads">git-scm</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install git-all <span class="comment"># Red-Hat</span></span><br><span class="line"><span class="built_in">sudo</span> apt install git-all <span class="comment"># Debian</span></span><br></pre></td></tr></table></figure>
<h1 id="配置">配置</h1>
<ul>
<li><code>/etc/gitconfig</code> =&gt; <code>--system</code>: 系统级配置文件</li>
<li><code>~/.gitconfig</code> =&gt; <code>--global</code>: 用户级配置文件</li>
<li><code>.git/config</code> =&gt; <code>--local</code>: 项目级配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有可用配置字段</span></span><br><span class="line">git <span class="built_in">help</span> --config</span><br><span class="line"></span><br><span class="line">man git-config</span><br></pre></td></tr></table></figure>
<h1 id="get-repository">Get repository</h1>
<ul>
<li>新建</li>
<li>克隆</li>
</ul>
<p>新建本地仓库:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> new_pro</span><br><span class="line"><span class="built_in">cd</span> new_pro</span><br><span class="line">git init --bare <span class="comment"># 创建.git并初始化配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若想让远程用户也能够访问本地仓库则</span></span><br><span class="line">git update-server-info</span><br></pre></td></tr></table></figure>
<p>克隆(需要联网):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;remote_url&gt;</span><br><span class="line">git <span class="built_in">clone</span> username@host:repo_name</span><br></pre></td></tr></table></figure>
<h1 id="add-and-commit">Add and commit</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将工作代码中的变更添加到暂存区,不会改变仓库内容</span></span><br><span class="line">git add filename...</span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#git rm --cached &lt;file&gt;... # unstage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将变更提交到仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩短add/commit操作的输入</span></span><br><span class="line">git commit -am <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="comment"># -a: 在提交前加入新的代码(add)</span></span><br><span class="line"><span class="comment"># -m: 指定一条信息, 不进入编辑器</span></span><br><span class="line"></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<h1 id="status">Status</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<h1 id="log">Log</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># -p</span></span><br><span class="line"><span class="comment"># --pretty=short</span></span><br><span class="line"><span class="comment"># --graph</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h1 id="diff">Diff</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>
<h1 id="版本回退">版本回退</h1>
<p>Git中用<code>HEAD</code>表示当前版本,用<code>HEAD^</code>表示上一个版本, 用<code>HEAD^^</code>表示上上个版本,用<code>HEAD~100</code>表示往上100个版本.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回退到上个版本</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转到指定版本</span></span><br><span class="line">git reset --hard &lt;版本号前几位&gt;</span><br><span class="line"></span><br><span class="line">git reset --hard hash_value</span><br><span class="line"></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h1 id="远程仓库">远程仓库</h1>
<h2 id="ssh验证">SSH验证</h2>
<p>首次关联远程仓库需要SSH验证.</p>
<ol type="1">
<li>创建<code>SSH Key</code>. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;email address&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>登录Github,头像-&gt;settings-&gt;SSH and GPG keys-&gt;Add SSH Key. 使用<code>~/.ssh/id_rsa.pub</code>作为输入.</li>
</ol>
<p>验证是否能够连接:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T -i ~/.ssh/id_rsa git@github.com</span><br><span class="line"></span><br><span class="line">ssh-agent -s</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h2 id="关联远程仓库">关联远程仓库</h2>
<p>在Github创建仓库.</p>
<p>本地: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关联远程仓库,仓库名一般用origin</span></span><br><span class="line">git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">git remote add origin git@github.com:user/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件推送到远程仓库</span></span><br><span class="line">git push -u &lt;仓库名&gt; &lt;分支名&gt;</span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p>
<p>由于远程库是空的,第一次推送<code>master</code>分支时加上了<code>-u</code>选项,Git不但会把本地的 <code>master</code>分支的内容推送到远程新的<code>master</code>分支,还会将本地的<code>master</code>分支和远程的 <code>master</code>分支关联起来,在以后的推送或拉取时可简化命令.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简化的推送命令</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>可关联多个远程仓库,注意给不同的远程仓库取不一样的名称,提交是分别按名称提交到 不同的远程库.</p>
<h2 id="查看远程库">查看远程库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h2 id="删除远程库">删除远程库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> &lt;仓库名&gt;</span><br></pre></td></tr></table></figure>
<h2 id="从远程库克隆">从远程库克隆</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库地址&gt;</span><br><span class="line"></span><br><span class="line">git pull <span class="comment"># 在原有本地仓库的基础上增量克隆远程新增的内容</span></span><br></pre></td></tr></table></figure>
<h2 id="克隆指定分支">克隆指定分支</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;分支名&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>
<h1 id="branch">Branch</h1>
<p>在添加新特性时,应创建一个新分支来表示出这次变更, 新的代码经过测试和验证后就可由项目维护者将新分支合并入主分支.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout old_branch_name</span><br><span class="line"><span class="comment"># checkout 会检查系统中的.git目录</span></span><br><span class="line"><span class="comment"># 然后恢复与指定分支相关联的快照</span></span><br><span class="line"><span class="comment"># 若在当前工作区有未提交的变更则无法切换到其他已有分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支并切换到该分支</span></span><br><span class="line">git checkout -b new_branch_name</span><br><span class="line"><span class="comment"># iff</span></span><br><span class="line">git branch new_branch_name</span><br><span class="line">git checkout new_branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch -v <span class="comment"># verbose</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git checkout originalBranch</span><br><span class="line">git checkout -b modsToOriginalBranch</span><br><span class="line"><span class="comment"># 经过编辑,测试</span></span><br><span class="line">git commit -am <span class="string">&quot;comment on modifications to originalBranch&quot;</span></span><br><span class="line">git checkout originalBranch</span><br><span class="line">git merge modsToOriginalBranch</span><br><span class="line"><span class="comment"># git merge --no-ff fix-B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若合并完分支后不再需要该分支可删除</span></span><br><span class="line">git branch -d modsToOriginalBranch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名</span></span><br><span class="line">git branch -m &lt;src&gt; &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">git push origin &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>
<p>合并: 将指定分支合并到当前分支,并非当前分支合并到指定分支.</p>
<p>一般情况是将当前分支切换到主分支,然后将子分支合并到主分支.</p>
<h2 id="推送远程">推送远程</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:user/repo.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<h2 id="使用指定私钥">使用指定私钥</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.sshCommand <span class="string">&quot;ssh -i /path/to/your/privateKey&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="git-项目太大-无法推送成功">git 项目太大, 无法推送成功</h1>
<p>三种方法:</p>
<ul>
<li>修改缓存大小. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure></li>
<li>配置git的最低速度和最低速度时间. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.lowSpeedLimit 0</span><br><span class="line">git config --global http.lowSpeedTime 999999 <span class="comment"># 单位秒</span></span><br></pre></td></tr></table></figure></li>
<li>使用SSH路径.</li>
</ul>
<h1 id="git-服务器">Git 服务器</h1>
<ul>
<li>SSH协议服务器</li>
<li>HTTP协议服务器</li>
<li>Git协议服务器</li>
</ul>
<h2 id="ssh服务器">SSH服务器</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建基于密码验证的SSH服务器</span></span><br><span class="line"><span class="comment"># For Server</span></span><br><span class="line">git init --bare /var/git/base_ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Client</span></span><br><span class="line">git <span class="built_in">clone</span> root@server_address:/var/git/base_ssh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 免密</span></span><br><span class="line"><span class="comment"># For Client</span></span><br><span class="line">ssh-keygen -f /root/.ssh/id_rsa -N <span class="string">&#x27;&#x27;</span></span><br><span class="line">ssh-copy-id root@server_address</span><br><span class="line">git <span class="built_in">clone</span> root@server_address:/var/git/base_ssh</span><br></pre></td></tr></table></figure>
<h2 id="git-服务器-1">Git 服务器</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For Server</span></span><br><span class="line">yum -y install git-daemon</span><br><span class="line">git init --bare /var/git/base_git</span><br><span class="line">vim /usr/lib/systemd/system/git@service</span><br><span class="line"><span class="comment"># 修改ExecStart中的base-path为/var/git</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">systemctl start git.socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Client</span></span><br><span class="line">git <span class="built_in">clone</span> git://server_address/base_git</span><br></pre></td></tr></table></figure>
<h2 id="http服务器read-only">HTTP服务器(read only)</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># For Sever</span></span><br><span class="line">yum -y install httpd gitweb</span><br><span class="line">vim /etc/gitweb.conf</span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="comment"># $projectroot=&quot;/var/git&quot;;</span></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">git init --bare /var/git/base_http</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Client</span></span><br><span class="line"><span class="comment"># Using Browser to Visit</span></span><br><span class="line"><span class="comment"># server_address:100/tree</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="git_cheatsheet.jpg" alt="" /><figcaption>Git Cheat Sheet</figcaption>
</figure>
<h1 id="其他">其他</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global color.ui <span class="literal">true</span>                         <span class="comment"># git status等命令自动着色</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy                    <span class="comment"># remove  proxy configuration on git</span></span><br><span class="line">git <span class="built_in">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class="comment"># clone远程仓库</span></span><br><span class="line">git commit --amend -m <span class="string">&#x27;xxx&#x27;</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am <span class="string">&#x27;xxx&#x27;</span>                                      <span class="comment"># 将add和commit合为一步</span></span><br><span class="line">git <span class="built_in">rm</span> xxx                                                <span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r *                                               <span class="comment"># 递归删除</span></span><br><span class="line">git <span class="built_in">log</span> -1                                                <span class="comment"># 显示1行日志 -n为n行</span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                                            <span class="comment"># 显示提交日志及相关变动文件</span></span><br><span class="line">git <span class="built_in">log</span> -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="comment"># 显示某个提交的详细内容</span></span><br><span class="line">git show dfb02                                            <span class="comment"># 可只用commitid的前几位</span></span><br><span class="line">git show HEAD                                             <span class="comment"># 显示HEAD提交日志</span></span><br><span class="line">git show HEAD^                                            <span class="comment"># 显示HEAD的父（上一版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class="line">git tag -a v2.0 -m <span class="string">&#x27;xxx&#x27;</span>                                  <span class="comment"># 增加v2.0的tag</span></span><br><span class="line">git show v2.0                                             <span class="comment"># 显示v2.0的日志及详细内容</span></span><br><span class="line">git <span class="built_in">log</span> v2.0                                              <span class="comment"># 显示v2.0的日志</span></span><br><span class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></span><br><span class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></span><br><span class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></span><br><span class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></span><br><span class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class="line">git diff origin/master..master --<span class="built_in">stat</span>                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class="line">git branch --contains 50089                               <span class="comment"># 显示包含提交50089的分支</span></span><br><span class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></span><br><span class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></span><br><span class="line">git branch --merged                                       <span class="comment"># 显示所有已合并到当前分支的分支</span></span><br><span class="line">git branch --no-merged                                    <span class="comment"># 显示所有未合并到当前分支的分支</span></span><br><span class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></span><br><span class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></span><br><span class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></span><br><span class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></span><br><span class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class="line">git checkout v2.0                                         <span class="comment"># 检出版本v2.0</span></span><br><span class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></span><br><span class="line">git cherry-pick ff44785404a8e                             <span class="comment"># 合并提交ff44785404a8e的修改</span></span><br><span class="line">git push origin :hotfixes/BJVEP933                        <span class="comment"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></span><br><span class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支</span></span><br><span class="line">git <span class="built_in">mv</span> README README2                                     <span class="comment"># 重命名文件README为README2</span></span><br><span class="line">git reset --hard HEAD                                     <span class="comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           <span class="comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class="line">git branch -D hotfixes/BJVEP933                           <span class="comment"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class="line">git ls-files                                              <span class="comment"># 列出git index包含的文件</span></span><br><span class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></span><br><span class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></span><br><span class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class="line">git ls-tree HEAD                                          <span class="comment"># 内部命令：显示某个git对象</span></span><br><span class="line">git rev-parse v2.0                                        <span class="comment"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class="line">git reflog                                                <span class="comment"># 显示所有提交，包括孤立节点</span></span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               <span class="comment"># 显示master分支昨天的状态</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph                   <span class="comment"># 图示提交日志</span></span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 <span class="comment"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class="line">git stash list                                            <span class="comment"># 查看所有暂存</span></span><br><span class="line">git stash show -p stash@&#123;0&#125;                               <span class="comment"># 参考第一次暂存</span></span><br><span class="line">git stash apply stash@&#123;0&#125;                                 <span class="comment"># 应用第一次暂存</span></span><br><span class="line">git grep <span class="string">&quot;delete from&quot;</span>                                    <span class="comment"># 文件中搜索文本“delete from”</span></span><br><span class="line">git grep -e <span class="string">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用代理的不同姿势</title>
    <url>/2024/07/24/how-to-use-proxy/</url>
    <content><![CDATA[<p>这里假定本地(Linux)已经配置好了代理. 且假定使用的是 <code>Clash</code>.</p>
<p><code>7890</code> 端口对应 <code>HTTP</code>, <code>7891</code> 端口对应 <code>socks5</code>.</p>
<h1 id="环境变量最为通用">环境变量(最为通用)</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&#x27;socks5://127.0.0.1:7891&#x27;</span></span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&#x27;socks5://127.0.0.1:7891&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以封装并持久化到 <code>~/.bashrc</code> 中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $HOME/.bashrc</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_proxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> HTTP_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">    <span class="built_in">export</span> HTTPS_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">    <span class="built_in">export</span> ALL_PROXY=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unset_proxy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">unset</span> HTTP_PROXY</span><br><span class="line">    <span class="built_in">unset</span> HTTPS_PROXY</span><br><span class="line">    <span class="built_in">unset</span> ALL_PROXY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样便可用 <code>set_proxy</code> 和 <code>unset_proxy</code> 来开关代理.</p>
<h1 id="proxychains-ng">proxychains-ng</h1>
<p>这种方式只能代理基于 <code>TCP</code> 协议的请求, 因此也就无法代理 <code>ping</code> 命令(<code>ICMP</code>).</p>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install proxychains-ng</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains/proxychains.conf</span><br></pre></td></tr></table></figure>
<p>改动以下内容(协议和端口要对应): <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dynamic_chain</span><br><span class="line"><span class="comment">#strict_chain</span></span><br><span class="line"></span><br><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 7891</span><br></pre></td></tr></table></figure></p>
<h2 id="使用">使用</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains4 firefox </span><br><span class="line"></span><br><span class="line">proxychains4 wget <span class="string">&quot;https://www.google.com&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="curl">curl</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -x http://127.0.0.1:7890 https://www.google.com -v</span><br></pre></td></tr></table></figure>
<h1 id="git">git</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_git_proxy</span></span>() &#123;</span><br><span class="line">    PROXY_SERVER=<span class="string">&#x27;http://127.0.0.1:7890&#x27;</span></span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    <span class="comment">#PROXY_SERVER=&#x27;socks5://127.0.0.1:7891&#x27;</span></span><br><span class="line">    git config --<span class="built_in">local</span> http.proxy <span class="string">&quot;<span class="variable">$&#123;PROXY_SERVER&#125;</span>&quot;</span></span><br><span class="line">    git config --<span class="built_in">local</span> https.proxy <span class="string">&quot;<span class="variable">$&#123;PROXY_SERVER&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unset_git_proxy</span></span>() &#123;</span><br><span class="line">    git config --<span class="built_in">local</span> --<span class="built_in">unset</span> http.proxy</span><br><span class="line">    git config --<span class="built_in">local</span> --<span class="built_in">unset</span> https.proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
        <category>Proxy</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Cpp 实现数组栈</title>
    <url>/2024/07/22/implement-array-stack-using-cpp/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeLength</span> <span class="params">(T*&amp; arr, <span class="type">int</span> oldLen, <span class="type">int</span> newLen)</span> </span>&#123;</span><br><span class="line">    T * temp = <span class="keyword">new</span> T[newLen];</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">min</span>(oldLen, newLen);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(arr, arr + num, temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] arr;</span><br><span class="line"></span><br><span class="line">    arr = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">arrayStack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">arrayStack</span> (<span class="type">int</span> initialCapacity = <span class="number">55</span>);</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">arrayStack</span> () &#123; <span class="keyword">delete</span> [] stack; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> stackTop == <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">size</span> <span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> stackTop + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">T&amp; <span class="title">top</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (stackTop != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> stack[stackTop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                --stackTop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span> <span class="params">(<span class="type">const</span> T&amp; theElement)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> stackTop;</span><br><span class="line">        <span class="type">int</span> arrayLength;</span><br><span class="line">        T * stack;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">arrayStack&lt;T&gt; :: <span class="built_in">arrayStack</span> (<span class="type">int</span> initialCapacity) &#123;</span><br><span class="line">    arrayLength = initialCapacity;</span><br><span class="line">    stack = <span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    stackTop = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> arrayStack&lt;T&gt; :: <span class="built_in">push</span> (<span class="type">const</span> T&amp; theElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stackTop == arrayLength - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">changeLength</span>(stack, arrayLength, <span class="number">2</span> * arrayLength);</span><br><span class="line">        arrayLength *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stack[++stackTop] = theElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux 中安装 TeXLive</title>
    <url>/2024/07/22/install-texlive-in-termux/</url>
    <content><![CDATA[<p>笔者的系统: Android 11.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install texlive-installer</span><br></pre></td></tr></table></figure>
<p>使用清华大学镜像站的<code>CTAN</code>进入下一步安装: <code>https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/</code>.</p>
<p>输入: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">termux-install-tl --location https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br></pre></td></tr></table></figure></p>
<p>不用镜像站可能会安不了, 就算能安也要十几个小时, 使用镜像站就安装了一个小时多.</p>
<p>上面的命令输入后会进入一个安装的界面此时输入<code>i</code>进行安装,而后等待安装完毕(一个小时多).</p>
<p>写一个<code>tex</code>文件并通过<code>xelatex</code>编译检查是否安装成功.(如果不行的话需要重启<code>Termux</code>).</p>
]]></content>
      <categories>
        <category>Termux</category>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>TeXLive</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 中将 &#39;section*&#39; 加入 TOC</title>
    <url>/2024/07/22/latex-addcontentsline/</url>
    <content><![CDATA[<p><code>\section&#123;&#125;</code>和<code>\section*&#123;&#125;</code>区别在于前者会被编号(编号+section内容), 而后者不会. 同时, 前者会被加入<code>\tableofcontents</code>的内容中, 而后者默认情况下是不会的.</p>
<p>e.g.</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;About this Article&#125; <span class="comment">% 不会被加入toc</span></span><br><span class="line"><span class="keyword">\section</span>*&#123;About this Author&#125; <span class="comment">% 不会被加入toc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;First Step&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;Second Step&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用<code>\addcontentsline</code>改变这一行为:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;About this Article&#125;</span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;About this Article&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>*&#123;About this Author&#125; </span><br><span class="line"><span class="keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;About this Author&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;First Step&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;Second Step&#125;</span><br></pre></td></tr></table></figure>
<p>Reference: <a href="https://tex.stackexchange.com/questions/58863/how-do-i-include-a-section-in-a-tableofcontents#:~:text=Use%20addcontentsline%20to%20add%20the%20section%2A%20to%20the,section%20%7BFirst%20Step%7D%20section%20%7BSecond%20Step%7D%20end%20%7Bdocument%7D">tex.stackexchange.com</a></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux CA 证书</title>
    <url>/2024/07/23/linux-certificate-authority-management/</url>
    <content><![CDATA[<h1 id="对称加密算法">对称加密算法</h1>
<p>Objects:</p>
<ol type="1">
<li>Plain text</li>
<li>Cipher text</li>
<li>Encryption Algorithm</li>
<li>Decryption Algorithm</li>
<li>Key</li>
</ol>
<p>Plain text --Encryption(Encryption Algorithm and Key)--&gt; Cipher text --Decryption(Decryption Algorithm and Key)--&gt; Plain text.</p>
<p>加密和解密是同一个密钥.</p>
<p>对称加密无法验证明文发送方的身份.</p>
<h1 id="非对称加密算法">非对称加密算法</h1>
<p>Objects:</p>
<ol type="1">
<li>Plain text</li>
<li>Cipher text</li>
<li>Encryption Algorithm</li>
<li>Decryption Algorithm</li>
<li>Public Key of Sender(A)</li>
<li>Private Key of Sender(A)</li>
<li>Public Key of Receiver(B)</li>
<li>Private Key of Receiver(B)</li>
</ol>
<p>Procedure:</p>
<ol type="1">
<li>A 使用自己的私钥完成数据签名.</li>
<li>A 使用 B 的公钥将私钥和明文加密.</li>
<li>B 使用自己的私钥解密密文.</li>
<li>B 使用 A 的公钥获得数据签名并验证.</li>
</ol>
<p>非对称加密算法可以验证发送者的身份但效率低.</p>
<h1 id="ca-证书">CA 证书</h1>
<p>CA(Certificate Authority).</p>
<p>CA 证书由 CA 机构下发, 一般企业按年付费.</p>
<p>加密要用到公钥、私钥, 验证公钥真伪需要交换公钥, 实现公钥安全交换需要证书.</p>
<p>HTTPS 背后的加密用到的就是证书机制.</p>
<h1 id="实现-ca-证书颁发">实现 CA 证书颁发</h1>
<p>证书申请及签署步骤：</p>
<ol type="1">
<li>生成证书申请请求</li>
<li>RA 核验</li>
<li>CA 签署</li>
<li>获取证书</li>
</ol>
<p>修改 OpenSSL 配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pki/tls/openssl.cnf</span><br></pre></td></tr></table></figure>
<details>
<p><summary>OpenSSL 配置文件</summary></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs</span><br><span class="line"># so this is commented out by default to leave a V1 CRL.</span><br><span class="line"># crlnumber must also be commented out to leave a V1 CRL.</span><br><span class="line"># crl_extensions    = crl_ext</span><br><span class="line">default_days    = 365           # how long to certify for     默认有效期是365</span><br><span class="line">default_crl_days= 30            # how long before next CRL</span><br><span class="line">default_md  = sha256        # use SHA-256 by default</span><br><span class="line">preserve    = no            # keep passed DN ordering</span><br><span class="line"># A few difference way of specifying how similar the request should look</span><br><span class="line"># For type CA, the listed attributes must be the same, and the optional</span><br><span class="line"># and supplied fields are just that :-)</span><br><span class="line">policy      = policy_match</span><br><span class="line"># For the CA policy</span><br><span class="line">[ policy_match ]</span><br><span class="line">countryName     = match                   国家       match三个为填写信息的一致性，需务必完整填写</span><br><span class="line">stateOrProvinceName = match               省份</span><br><span class="line">organizationName    = match               组织</span><br><span class="line">organizationalUnitName  = optional</span><br><span class="line">commonName      = supplied</span><br><span class="line">emailAddress        = optional</span><br><span class="line"># For the &#x27;anything&#x27; policy</span><br><span class="line"># At this point in time, you must list all acceptable &#x27;object&#x27;</span><br><span class="line"># types.</span><br><span class="line">[ policy_anything ]                           另一套策略，改了可以不要求一致性</span><br><span class="line">countryName     = optional</span><br><span class="line">stateOrProvinceName = optional</span><br><span class="line">localityName        = optional</span><br><span class="line">organizationName    = optional</span><br><span class="line">organizationalUnitName  = optional</span><br><span class="line">commonName      = supplied</span><br><span class="line">emailAddress        = optional</span><br></pre></td></tr></table></figure>
</details>
<p>创建 CA 目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -pv /etc/pki/CA/&#123;certs,crl,newcerts,private&#125;</span><br></pre></td></tr></table></figure>
<p>生成私钥文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA</span><br><span class="line">(<span class="built_in">umask</span> 066; openssl genrsa -out private/ackey.pem 2048)</span><br></pre></td></tr></table></figure>
<p>生成 CA 自签名证书:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -key /etc/pki/CA/private/ackey.pem -days 3650 -out /etc/pki/CA/cacert.pem</span><br></pre></td></tr></table></figure>
<p>查看证书详细信息. 加上 <code>crt</code> 后缀就是完整的自签名证书.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /etc/pki/CA/cacert.pem -noout -text</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Security</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cryptography</tag>
      </tags>
  </entry>
  <entry>
    <title>括号匹配</title>
    <url>/2024/07/22/match-parentheses/</url>
    <content><![CDATA[<h1 id="problem">Problem</h1>
<blockquote>
<p>给定一个只包括 '('，')'，'{'，'}'，'['， ']' 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol type="1">
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<p>注意: 空字符串可被认为是有效字符串。</p>
</blockquote>
<h2 id="example">Example</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:a &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:a &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<h2 id="solution">Solution</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">isValid</span> = s =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [],</span><br><span class="line">        brackets = &#123;</span><br><span class="line">            <span class="string">&quot;(&quot;</span>: <span class="string">&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[&quot;</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#123;&quot;</span>: <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (brackets[s[i]])</span><br><span class="line">        stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] !== brackets[stack.<span class="title function_">pop</span>()])</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 迁移 /var/lib/docker 目录</title>
    <url>/2024/07/23/move-var-lib-docker-for-docker/</url>
    <content><![CDATA[<p>两种方法:</p>
<ul>
<li>迁移数据文件</li>
<li>软链接</li>
</ul>
<p>查看数据文件存放位置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info | grep -i <span class="string">&quot;root&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="迁移数据文件">迁移数据文件</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/docker/lib</span><br><span class="line">rsync -avzP /var/lib/docker /data/docker/lib/</span><br><span class="line"></span><br><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<p>在 <code>ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</code> 后添加 <code>--data-root /data/docker/lib/docker</code>.</p>
<p>也可以不修改启动文件, 而是修改 <code>/etc/docker/daemon.json</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p><code>/etc/docker/daemon.json</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/docker/lib/docker&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>确认 <code>docker</code> 正常后删除原来目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>
<h1 id="软链接">软链接</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/docker/lib</span><br><span class="line"></span><br><span class="line">rsync -avzP /var/lib/docker /data/docker/lib/</span><br><span class="line"><span class="built_in">mv</span> -u /var/lib/docker /var/lib/docker.bak</span><br><span class="line"><span class="built_in">ln</span> -fs /data/docker/lib/docker /var/lib/docker</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认无误后删除</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker.bak</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 上安装多个版本的 Python</title>
    <url>/2024/07/22/python-version-management/</url>
    <content><![CDATA[<h1 id="依赖安装">依赖安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get -y install libc6-dev gcc make build-essential \</span><br><span class="line">    libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \</span><br><span class="line">    wget curl llvm git</span><br></pre></td></tr></table></figure>
<h1 id="拉取版本管理工具的仓库">拉取版本管理工具的仓库</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yyuu/pyenv.git  ~/.pyenv</span><br></pre></td></tr></table></figure>
<h1 id="配置环境变量">配置环境变量</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span> -l</span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>
<h1 id="版本管理工具的使用">版本管理工具的使用</h1>
<h2 id="查看可安装的-python-版本">查看可安装的 Python 版本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure>
<h2 id="查看已安装的版本">查看已安装的版本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
<h2 id="安装指定版本">安装指定版本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.10.0</span><br></pre></td></tr></table></figure>
<h2 id="切换版本">切换版本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.10.0</span><br><span class="line"></span><br><span class="line">pyenv global system</span><br><span class="line"></span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
<h2 id="安装模块">安装模块</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip3 install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<h2 id="更新系统数据库">更新系统数据库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">rehash</span></span><br></pre></td></tr></table></figure>
<h1 id="虚拟环境">虚拟环境</h1>
<h2 id="使用-python-自带模块">使用 Python 自带模块</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">pyenv global 3.10.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/venv_dir</span><br><span class="line">python3 -m venv venv_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/venv_dir/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="built_in">rm</span> -rf ~/venv_dir</span><br></pre></td></tr></table></figure>
<h2 id="使用第三方模块">使用第三方模块</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.10.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第三方模块</span></span><br><span class="line">pip3 install virtualenv -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">pip3 install virtualenvwrapper -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境配置</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.virtualenvs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;VIRTUALENVWRAPPER_PYTHON=<span class="subst">$(which python3)</span>&quot;</span> &gt;&gt; .bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs&quot;</span> &gt;&gt; .bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$HOME</span>/.pyenv/versions/3.10.0/bin/virtualenvwrapper.sh&quot;</span> &gt;&gt; .bashrc</span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 test 虚拟环境并进入</span></span><br><span class="line">mkvirtualenv -p <span class="variable">$HOME</span>/.pyenv/versions/3.10.0/bin/python3.10 <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> .virtualenvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">workon <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line">rmvirtualenv <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 VmWare 中虚拟机挂起恢复后无法连接到 Docker 容器的问题</title>
    <url>/2024/07/22/resolve-docker-container-connection-problem-after-resuming-from-suspending/</url>
    <content><![CDATA[<p>需要将 docker 的网络接口设置为不由 <code>NetworkManager</code> 接管.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">touch</span> /etc/NetworkManager/conf.d/10-unmanage-docker-interfaces.conf</span><br></pre></td></tr></table></figure>
<p>输入以下内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[keyfile]</span><br><span class="line">unmanaged-devices=interface-name:docker*;interface-name:veth*;interface-name:br-*;interface-name:vmnet*;interface-name:vboxnet*</span><br></pre></td></tr></table></figure>
<p>这个配置使 <code>NetworkManager</code> 忽略所有 <code>docker*</code>、<code>veth*</code>、<code>br-*</code>、<code>vmnet*</code>和<code>vboxnet*</code> 的网络接口.</p>
<p>重启 <code>NetworkManager</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>
<p>可通过以下命令查看日志: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl -u docker</span><br><span class="line">journalctl -u NetworkManager</span><br></pre></td></tr></table></figure></p>
<p>这是 <code>NetworkManager</code> 的日志:</p>
<details>
<p><summary>Log of NetworkManager</summary></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jul 22 08:53:02 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 09:08:02 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 09:23:02 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 09:38:02 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  manager: disable requested (sleeping: no  enabled: yes)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  audit: op=&quot;networking-control&quot; arg=&quot;off&quot; pid=432580 uid=0 result=&quot;success&quot;</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: activated -&gt; deactivating (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: activated -&gt; deactivating (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: activated -&gt; deactivating (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: deactivating -&gt; disconnected (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): canceled DHCP transaction</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): activation: beginning transaction (timeout in 45 seconds)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed no lease</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: disconnected -&gt; unmanaged (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: deactivating -&gt; disconnected (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: deactivating -&gt; disconnected (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: disconnected -&gt; unmanaged (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 09:38:27 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: disconnected -&gt; unmanaged (reason &#x27;sleeping&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  manager: enable requested (sleeping: no  enabled: no)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: unmanaged -&gt; unavailable (reason &#x27;managed&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: unmanaged -&gt; unavailable (reason &#x27;managed&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): detached bridge port vetha57723b</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (vetha57723b): released from master device br-8e1170ec43de</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): detached bridge port veth2a386f2</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (veth2a386f2): released from master device br-8e1170ec43de</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  audit: op=&quot;networking-control&quot; arg=&quot;on&quot; pid=432872 uid=0 result=&quot;success&quot;</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): carrier: link connected</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;warn&gt;  device (br-8e1170ec43de): queue-state[unmanaged, reason:connection-assumed, id:4346]: replace previously queued state change</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: unavailable -&gt; disconnected (reason &#x27;carrier-changed&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: unavailable -&gt; disconnected (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  policy: auto-activating connection &#x27;Wired connection 1&#x27; (2b18580d-b929-4b26-a639-c835f5560ee6)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): Activation: starting connection &#x27;Wired connection 1&#x27; (2b18580d-b929-4b26-a639-c835f5560ee6)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: disconnected -&gt; prepare (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: prepare -&gt; config (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: config -&gt; ip-config (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): activation: beginning transaction (timeout in 45 seconds)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  policy: set &#x27;Wired connection 1&#x27; (eth0) as default for IPv4 routing and DNS</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: ip-config -&gt; ip-check (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: ip-check -&gt; secondaries (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): state change: secondaries -&gt; activated (reason &#x27;none&#x27;, sys-iface-state: &#x27;managed&#x27;)</span><br><span class="line">Jul 22 14:19:10 NetworkManager[486]: &lt;info&gt;  device (eth0): Activation: successful, device activated.</span><br><span class="line">Jul 22 14:27:50 NetworkManager[486]: &lt;info&gt;  manager: (veth17a90ac): new Veth device (/org/freedesktop/NetworkManager/Devices/118)</span><br><span class="line">Jul 22 14:28:00 NetworkManager[486]: &lt;info&gt;  manager: (veth3a2cb32): new Veth device (/org/freedesktop/NetworkManager/Devices/119)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): Activation: starting connection &#x27;br-8e1170ec43de&#x27; (a460bc87-aae2-4968-92f3-bc79d900adff)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: disconnected -&gt; prepare (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: prepare -&gt; config (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: config -&gt; ip-config (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: ip-config -&gt; ip-check (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: ip-check -&gt; secondaries (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): state change: secondaries -&gt; activated (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): Activation: successful, device activated.</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: unmanaged -&gt; unavailable (reason &#x27;connection-assumed&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: unavailable -&gt; disconnected (reason &#x27;connection-assumed&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): Activation: starting connection &#x27;docker0&#x27; (4b0f48d5-4fe9-41b7-a6ae-23472046e9e0)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: disconnected -&gt; prepare (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: prepare -&gt; config (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: config -&gt; ip-config (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: ip-config -&gt; ip-check (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: ip-check -&gt; secondaries (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): state change: secondaries -&gt; activated (reason &#x27;none&#x27;, sys-iface-state: &#x27;external&#x27;)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (docker0): Activation: successful, device activated.</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  manager: (vetha472480): new Veth device (/org/freedesktop/NetworkManager/Devices/120)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  manager: (veth8b414e1): new Veth device (/org/freedesktop/NetworkManager/Devices/121)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  manager: (veth8758089): new Veth device (/org/freedesktop/NetworkManager/Devices/122)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  manager: (veth1ddfd59): new Veth device (/org/freedesktop/NetworkManager/Devices/123)</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (veth1ddfd59): carrier: link connected</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (br-8e1170ec43de): carrier: link connected</span><br><span class="line">Jul 22 14:28:01 NetworkManager[486]: &lt;info&gt;  device (veth8b414e1): carrier: link connected</span><br><span class="line">Jul 22 14:34:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 14:49:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 15:04:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 15:19:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br><span class="line">Jul 22 15:34:10 NetworkManager[486]: &lt;info&gt;  dhcp4 (eth0): state changed new lease, address=192.168.250.128</span><br></pre></td></tr></table></figure>
</details>
<p>这是 <code>Docker</code> 的日志:</p>
<details>
<p><summary>Log of Docker</summary></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jul 22 08:38:36 systemd[1]: Starting docker.service - Docker Application Container Engine...</span><br><span class="line">Jul 22 08:38:36 (dockerd)[419954]: docker.service: Referenced but unset environment variable evaluates to an empty string: DOCKER_OPTS</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.599625076+08:00&quot; level=info msg=&quot;Starting up&quot;</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602757578+08:00&quot; level=info msg=&quot;[core] parsed scheme: \&quot;unix\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602792173+08:00&quot; level=info msg=&quot;[core] scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602815066+08:00&quot; level=info msg=&quot;[core] ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602826237+08:00&quot; level=info msg=&quot;[core] ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602832228+08:00&quot; level=info msg=&quot;[core] Channel switches to new LB policy \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.602902600+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.603063722+08:00&quot; level=info msg=&quot;[core] Subchannel picks a new address \&quot;unix:///run/containerd/containerd.sock\&quot; to connect&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.603836992+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.604780847+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.604864333+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.605994873+08:00&quot; level=info msg=&quot;[core] parsed scheme: \&quot;unix\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606030069+08:00&quot; level=info msg=&quot;[core] scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606055717+08:00&quot; level=info msg=&quot;[core] ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606066397+08:00&quot; level=info msg=&quot;[core] ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606073340+08:00&quot; level=info msg=&quot;[core] Channel switches to new LB policy \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606092986+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606119877+08:00&quot; level=info msg=&quot;[core] Subchannel picks a new address \&quot;unix:///run/containerd/containerd.sock\&quot; to connect&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606547178+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606612551+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.606623411+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.622721841+08:00&quot; level=info msg=&quot;[graphdriver] using prior storage driver: overlay2&quot;</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.669082353+08:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">Jul 22 08:38:36 dockerd[419954]: time=&quot;2024-07-22T08:38:36.864900883+08:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address&quot;</span><br><span class="line">Jul 22 08:38:37 dockerd[419954]: time=&quot;2024-07-22T08:38:37.630080628+08:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">Jul 22 08:38:37 dockerd[419954]: time=&quot;2024-07-22T08:38:37.659322638+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=5df983c graphdriver(s)=overlay2 version=20.10.25+dfsg1</span><br><span class="line">Jul 22 08:38:37 dockerd[419954]: time=&quot;2024-07-22T08:38:37.659711818+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">Jul 22 08:38:37 systemd[1]: Started docker.service - Docker Application Container Engine.</span><br><span class="line">Jul 22 08:38:37 dockerd[419954]: time=&quot;2024-07-22T08:38:37.688703835+08:00&quot; level=info msg=&quot;API listen on /run/docker.sock&quot;</span><br><span class="line">Jul 22 14:27:50 dockerd[419954]: time=&quot;2024-07-22T14:27:50.640298094+08:00&quot; level=info msg=&quot;Processing signal &#x27;terminated&#x27;&quot;</span><br><span class="line">Jul 22 14:27:50 systemd[1]: Stopping docker.service - Docker Application Container Engine...</span><br><span class="line">Jul 22 14:27:50 dockerd[419954]: time=&quot;2024-07-22T14:27:50.676106199+08:00&quot; level=info msg=&quot;ignoring event&quot; container=7dbd61bf4d1aa3ca6df835e33afb1cd9dcb3e6b6f0331188bec3591bde6b6917 module=libcontainerd namespace=moby topic=/tasks/delete type=&quot;*events.TaskDelete&quot;</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.656981023+08:00&quot; level=info msg=&quot;Container failed to exit within 10s of signal 3 - using the force&quot; container=ec2f9844554646cd744813c44fcb43c69ba40289c24bd0f25a31bba01968a86a</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.719369603+08:00&quot; level=info msg=&quot;ignoring event&quot; container=ec2f9844554646cd744813c44fcb43c69ba40289c24bd0f25a31bba01968a86a module=libcontainerd namespace=moby topic=/tasks/delete type=&quot;*events.TaskDelete&quot;</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.825616431+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to SHUTDOWN&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.825679529+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to SHUTDOWN&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.826768015+08:00&quot; level=info msg=&quot;stopping event stream following graceful shutdown&quot; error=&quot;&lt;nil&gt;&quot; module=libcontainerd namespace=moby</span><br><span class="line">Jul 22 14:28:00 dockerd[419954]: time=&quot;2024-07-22T14:28:00.826792486+08:00&quot; level=info msg=&quot;Daemon shutdown complete&quot;</span><br><span class="line">Jul 22 14:28:00 systemd[1]: docker.service: Deactivated successfully.</span><br><span class="line">Jul 22 14:28:00 systemd[1]: Stopped docker.service - Docker Application Container Engine.</span><br><span class="line">Jul 22 14:28:00 systemd[1]: docker.service: Consumed 3.211s CPU time.</span><br><span class="line">Jul 22 14:28:00 systemd[1]: Starting docker.service - Docker Application Container Engine...</span><br><span class="line">Jul 22 14:28:00 (dockerd)[434863]: docker.service: Referenced but unset environment variable evaluates to an empty string: DOCKER_OPTS</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.900683896+08:00&quot; level=info msg=&quot;Starting up&quot;</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902212026+08:00&quot; level=info msg=&quot;[core] parsed scheme: \&quot;unix\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902248604+08:00&quot; level=info msg=&quot;[core] scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902268201+08:00&quot; level=info msg=&quot;[core] ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902275906+08:00&quot; level=info msg=&quot;[core] ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902281556+08:00&quot; level=info msg=&quot;[core] Channel switches to new LB policy \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902310460+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902337712+08:00&quot; level=info msg=&quot;[core] Subchannel picks a new address \&quot;unix:///run/containerd/containerd.sock\&quot; to connect&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.902952955+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903079101+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903094530+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903513796+08:00&quot; level=info msg=&quot;[core] parsed scheme: \&quot;unix\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903555024+08:00&quot; level=info msg=&quot;[core] scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903572486+08:00&quot; level=info msg=&quot;[core] ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock  &lt;nil&gt; 0 &lt;nil&gt;&#125;] &lt;nil&gt; &lt;nil&gt;&#125;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903579329+08:00&quot; level=info msg=&quot;[core] ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903585260+08:00&quot; level=info msg=&quot;[core] Channel switches to new LB policy \&quot;pick_first\&quot;&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903610237+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903629513+08:00&quot; level=info msg=&quot;[core] Subchannel picks a new address \&quot;unix:///run/containerd/containerd.sock\&quot; to connect&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.903753947+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to CONNECTING&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.904242838+08:00&quot; level=info msg=&quot;[core] Subchannel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.904483600+08:00&quot; level=info msg=&quot;[core] Channel Connectivity change to READY&quot; module=grpc</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.920790966+08:00&quot; level=info msg=&quot;[graphdriver] using prior storage driver: overlay2&quot;</span><br><span class="line">Jul 22 14:28:00 dockerd[434863]: time=&quot;2024-07-22T14:28:00.940462384+08:00&quot; level=info msg=&quot;Loading containers: start.&quot;</span><br><span class="line">Jul 22 14:28:01 dockerd[434863]: time=&quot;2024-07-22T14:28:01.143598001+08:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can be used to set a preferred IP address&quot;</span><br><span class="line">Jul 22 14:28:01 dockerd[434863]: time=&quot;2024-07-22T14:28:01.671854881+08:00&quot; level=info msg=&quot;Loading containers: done.&quot;</span><br><span class="line">Jul 22 14:28:01 dockerd[434863]: time=&quot;2024-07-22T14:28:01.691885127+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=5df983c graphdriver(s)=overlay2 version=20.10.25+dfsg1</span><br><span class="line">Jul 22 14:28:01 dockerd[434863]: time=&quot;2024-07-22T14:28:01.691964235+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot;</span><br><span class="line">Jul 22 14:28:01 systemd[1]: Started docker.service - Docker Application Container Engine.</span><br><span class="line">Jul 22 14:28:01 dockerd[434863]: time=&quot;2024-07-22T14:28:01.711348240+08:00&quot; level=info msg=&quot;API listen on /run/docker.sock&quot;</span><br></pre></td></tr></table></figure>
</details>
<p>Reference:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/57874055/cant-connect-to-docker-after-resuming-vm">stackoverflow.com</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>VmWare</tag>
        <tag>NetworkManager</tag>
      </tags>
  </entry>
  <entry>
    <title>Set up tigervnc for linux</title>
    <url>/2024/07/21/set-up-tigervnc-for-linux/</url>
    <content><![CDATA[<h1 id="tigervnc-的基本用法">tigervnc 的基本用法</h1>
<h2 id="install">Install</h2>
<p>I suppose that you have installed the X-Window system(GUI).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install tigervnc-common tigervnc-standalone-server \</span><br><span class="line">tigervnc-tools tigervnc-viewer tigervnc-xorg-extension \</span><br><span class="line">tightvncserver</span><br></pre></td></tr></table></figure>
<h2 id="configuration">Configuration</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.vnc/</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/.vnc/</span><br><span class="line">vim xstartup</span><br></pre></td></tr></table></figure>
<p>Input the following content:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $HOME/.vnc/xstartup</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> SESSION_MANAGER <span class="comment"># 若 vnc 和登录所用 session 不一样, 就需要这个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Input method configuration</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=ibus</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=ibus</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=ibus</span><br><span class="line">/usr/bin/ibus-daemon -d &amp;</span><br><span class="line"></span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">dbus-launch --exit-with-session startxfce4</span><br></pre></td></tr></table></figure>
<p>Save and exit.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x xstartup</span><br></pre></td></tr></table></figure>
<h2 id="start-vnc-server">Start Vnc Server</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write this to ~/.bashrc</span></span><br><span class="line"><span class="built_in">alias</span> vncstart=<span class="string">&#x27;vncserver -geometry 1920x1080 -localhost no -xstartup &quot;$HOME/.vnc/xstartup&quot; :1&#x27;</span></span><br><span class="line"><span class="comment"># -geometry 指出分辨率</span></span><br><span class="line"><span class="comment"># -localhost no 可让本机之外的机器也能通过 vncviewer 连接到 vnc server</span></span><br><span class="line"><span class="comment"># -xstartup 指明要运行的脚本</span></span><br><span class="line"><span class="comment"># :1 表示用的 display 是 1</span></span><br><span class="line"></span><br><span class="line">vncstart</span><br></pre></td></tr></table></figure>
<h2 id="stop-vnc-server">Stop Vnc Server</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br></pre></td></tr></table></figure>
<h2 id="connect-to-vnc-server">Connect to Vnc Server</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncviewer -geometry 1920x1080 you_id_address:1</span><br></pre></td></tr></table></figure>
<h2 id="discussion">Discussion</h2>
<p>这是不加 <code>-xstartup</code> 选项时默认会运行的脚本:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/X11/Xtigervnc-session</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> x<span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span> = x<span class="string">&quot;&quot;</span> &amp;&amp; SHELL=/bin/bash</span><br><span class="line"><span class="built_in">test</span> x<span class="string">&quot;<span class="variable">$1</span>&quot;</span>     = x<span class="string">&quot;&quot;</span> &amp;&amp; <span class="built_in">set</span> -- default</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -r /etc/default/keyboard &amp;&amp;</span><br><span class="line">   <span class="built_in">test</span> -x /usr/bin/setxkbmap; <span class="keyword">then</span></span><br><span class="line">  . /etc/default/keyboard</span><br><span class="line">  /usr/bin/setxkbmap \</span><br><span class="line">    -model   <span class="string">&quot;<span class="variable">$&#123;XKBMODEL&#125;</span>&quot;</span> \</span><br><span class="line">    -layout  <span class="string">&quot;<span class="variable">$&#123;XKBLAYOUT&#125;</span>&quot;</span> \</span><br><span class="line">    -variant <span class="string">&quot;<span class="variable">$&#123;XKBVARIANT&#125;</span>&quot;</span> \</span><br><span class="line">    <span class="string">&quot;<span class="variable">$&#123;XKBOPTIONS&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">tigervncconfig -iconic &amp;</span><br><span class="line"><span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span> -l &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">exec /etc/X11/Xsession &quot;$@&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">tigervncserver -<span class="built_in">kill</span> <span class="variable">$DISPLAY</span></span><br></pre></td></tr></table></figure>
<p>需运行此脚本时, 需要将带有 <code>kill</code> 的那行注释掉才能成功.</p>
<h2 id="other-commands">Other Commands</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncserver -list <span class="comment"># 查看当前已启动的 vnc server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vncserver 是最终指向 /usr/bin/tigervncserver 的链接</span></span><br><span class="line"><span class="built_in">readlink</span> -f /usr/bin/vncserver</span><br><span class="line"><span class="comment"># /usr/bin/tigervncserver</span></span><br><span class="line"></span><br><span class="line">vncviewer <span class="comment"># 用来连接 vnc server</span></span><br><span class="line">vncsession</span><br><span class="line">vncpasswd <span class="comment"># 用于设置密码</span></span><br><span class="line">vncconfig</span><br></pre></td></tr></table></figure>
<h2 id="linux-设置开机不启动-gui">Linux 设置开机不启动 GUI</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl set-default multi-user.target</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>如此一来便可少启动一个 GUI Session, 减少内存占用.</p>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title>释放 Vmware 虚拟磁盘空间</title>
    <url>/2024/07/21/shrink-vmware-virtual-disk/</url>
    <content><![CDATA[<h1 id="释放-vmware-虚拟磁盘空间">释放 Vmware 虚拟磁盘空间</h1>
<ol type="1">
<li>分析大文件. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install baobab</span><br><span class="line">baobab</span><br></pre></td></tr></table></figure></li>
<li>删除无用文件.</li>
<li>删除<code>vmware</code>的<code>drag_and_drop</code>文件夹. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.cache/vmware/drag_and_drop</span><br></pre></td></tr></table></figure></li>
<li>删除docker相关文件. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker stop &#123;container&#125;</span><br><span class="line">docker <span class="built_in">rm</span> -v &#123;container&#125;</span><br><span class="line">docker rmi --force &#123;image&#125;</span><br><span class="line">docker volume prune <span class="comment"># 清除无主数据卷</span></span><br></pre></td></tr></table></figure></li>
<li>清空回收站.</li>
<li>用内容为二进制 <code>0</code> 的文件, 填充所有磁盘空间并删除这个文件. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/zero.file bs=2M</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">sync</span> <span class="comment"># 同步到磁盘</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /zero.file</span><br></pre></td></tr></table></figure> 原因:
<ul>
<li>虚拟机在操作磁盘镜像时, 类似于只操作扇区, 不考虑其上的文件系统的类型和内容.</li>
<li>磁盘镜像的存储类似稀疏矩阵的存储, 只有数据全 <code>0</code> 时空间才能被释放.</li>
</ul></li>
<li>在虚拟机中收缩根目录. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/bin/vmware-toolbox-cmd disk list <span class="comment"># 查看磁盘挂载点</span></span><br><span class="line"><span class="built_in">sudo</span> /usr/bin/vmware-toolbox-cmd disk shrink /</span><br></pre></td></tr></table></figure></li>
<li>关闭虚拟机, 从 <code>Vmware</code> 界面:
<ul>
<li>虚拟机设置</li>
<li>硬盘</li>
<li>压缩</li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VmWare</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux 备份与恢复</title>
    <url>/2024/07/22/termux-backup-and-restore/</url>
    <content><![CDATA[<h1 id="termux-备份与恢复">Termux 备份与恢复</h1>
<h2 id="备份">备份</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得存储权限</span></span><br><span class="line">termux-setup-storage</span><br></pre></td></tr></table></figure>
<p>建立备份压缩包，此命令会备份 <code>Termux</code> 外部目录的资料，<strong>不包含<code>proot-distro</code></strong>， 并将其储存为手机内部空间的<code>termux-backup.tar.gz</code>文件。备份时间视 <code>Termux</code> 占用的空间而定.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zcpf /sdcard/termux-backup.tar.gz -C /data/data/com.termux/files ./home ./usr</span><br></pre></td></tr></table></figure>
<p>没有root权限下，只能用<code>proot-distro backup</code>命令另外备份<code>proot-distro</code>的资料成一个压缩包， 需指定<code>proot-distro</code>的代号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proot-distro backup --output /sdcard/debianbackup.tar.gz debian</span><br></pre></td></tr></table></figure>
<p>如果有root权限，以下版本的命令则能连<code>proot-distro</code>内部目录的资料一起备份成单一压缩包， 无须再用<code>proot-distro backup</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install tsu</span><br><span class="line"><span class="built_in">sudo</span> tar -zcpf /sdcard/termux-backup.tar.gz -C /data/data/com.termux/files ./home ./usr</span><br></pre></td></tr></table></figure>
<h2 id="恢复">恢复</h2>
<p>重装<code>Termux</code>后，还原<code>Termux</code>备份不需要root权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">termux-setup-storage</span><br><span class="line">tar -zxf /sdcard/termux-backup.tar.gz -C /data/data/com.termux/files \</span><br><span class="line">    --recursive-unlink --preserve-permissions</span><br></pre></td></tr></table></figure>
<p>输入 <code>exit</code> 退出 <code>Termux</code>，重新打开 APP 即可。</p>
<p>还原另外备份的<code>proot-distro</code>则输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proot-distro restore /sdcard/debianbackup.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Termux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Termux</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Windows 上使用 TigerVNC 连接到 Linux</title>
    <url>/2024/07/30/use-tigervnc-in-windows/</url>
    <content><![CDATA[<h1 id="下载-tigervnc-viewer">下载 TigerVNC Viewer</h1>
<p>到 <a href="https://tigervnc.org/">https://tigervnc.org/</a> 下载 TigerVNC Viewer 的独立(Standalone)版本.</p>
<h1 id="配置-tigervnc">配置 TigerVNC</h1>
<p><code>1.tigervnc</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TigerVNC Configuration file Version 1.0</span><br><span class="line"></span><br><span class="line">ServerName=192.168.250.128:1</span><br><span class="line">X509CA=C:\\Users\\username\\AppData\\Roaming\\vnc/x509_ca.pem</span><br><span class="line">X509CRL=C:\\Users\\username\\AppData\\Roaming\\vnc/x509_crl.pem</span><br><span class="line">SecurityTypes=None,VncAuth,RA2ne,RA2ne_256,Plain,DH,MSLogonII,TLSNone,TLSVnc,TLSPlain,X509None,X509Vnc,X509Plain,RA2,RA2_256</span><br><span class="line">ReconnectOnError=1</span><br><span class="line">Shared=1</span><br><span class="line">AutoSelect=1</span><br><span class="line">FullColor=1</span><br><span class="line">LowColorLevel=2</span><br><span class="line">PreferredEncoding=Tight</span><br><span class="line">CustomCompressLevel=0</span><br><span class="line">CompressLevel=2</span><br><span class="line">NoJPEG=0</span><br><span class="line">QualityLevel=8</span><br><span class="line">FullScreen=0</span><br><span class="line">FullScreenMode=Current</span><br><span class="line">FullScreenSelectedMonitors=1</span><br><span class="line">ViewOnly=0</span><br><span class="line">EmulateMiddleButton=0</span><br><span class="line">DotWhenNoCursor=0</span><br><span class="line">AcceptClipboard=1</span><br><span class="line">SendClipboard=1</span><br><span class="line">MenuKey=F8</span><br><span class="line">FullscreenSystemKeys=1</span><br><span class="line">Password=123456</span><br></pre></td></tr></table></figure>
<p><code>ServerName</code>、<code>X509CA</code>、<code>X509CRL</code>、<code>Password</code> 需要修改.</p>
<h1 id="通过脚本启动">通过脚本启动</h1>
<p><code>vnc.bat</code>:</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;%<span class="number">1</span>&quot; == &quot;h&quot; <span class="keyword">goto</span> begin</span><br><span class="line">mshta Vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;%~nx0 h&quot;,<span class="number">0</span>)(window.close) &amp;&amp; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">:begin</span><br><span class="line">.\vncviewer-<span class="number">1</span>.<span class="number">13</span>.<span class="number">80</span>.exe -passwd C:\Users\username\.vnc\passwd .\<span class="number">1</span>.tigervnc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VNC</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 配置 Clash</title>
    <url>/2024/07/22/using-docker-to-configure-clash/</url>
    <content><![CDATA[<h1 id="使用-docker-配置-clash">使用 Docker 配置 Clash</h1>
<p>两种方式:</p>
<ul>
<li>CLI</li>
<li>docker-compose</li>
</ul>
<h2 id="cli">CLI</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare configuration</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/clash</span><br><span class="line"><span class="built_in">cp</span> ./config.yaml ~/clash/ <span class="comment"># 自行提供 config.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Running Clash</span></span><br><span class="line">docker run --name clash \</span><br><span class="line">  -p 5090:9090 -p 5890:7890 -p 5891:7891 \</span><br><span class="line">  -v ~/clash/config.yaml:/root/.config/clash/config.yaml -d \</span><br><span class="line">  dreamacro/clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Running Web-UI</span></span><br><span class="line">docker run --name clash-ui -p 5080:80 -d haishanh/yacd</span><br><span class="line"></span><br><span class="line"><span class="comment"># visit http://&lt;host_ip&gt;:5080</span></span><br><span class="line"><span class="comment"># add http://&lt;host_ip&gt;:5090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Environment variables</span></span><br><span class="line"><span class="comment">#export HTTP_PROXY=&#x27;http://127.0.0.1:5890&#x27;</span></span><br><span class="line"><span class="comment">#export HTTPS_PROXY=&#x27;http://127.0.0.1:5890&#x27;</span></span><br><span class="line"><span class="comment">#export ALL_PROXY=&#x27;socks5://127.0.0.1:5891&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose">docker-compose</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="comment"># version: &#x27;3.7&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">clash-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dreamacro/clash</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">clash</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7890:7890&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7891:7891&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/clash/config.yaml:/root/.config/clash/config.yaml</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">clash-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">haishanh/yacd</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">clash-ui</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>
<p>Run docker-compose:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Change to the directory where the docker-compose.yml is located.</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="test">Test</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -x http://127.0.0.1:7890 https://www.google.com -v</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Proxy</category>
        <category>Docker</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxy</tag>
        <tag>Docker</tag>
        <tag>Clash</tag>
      </tags>
  </entry>
  <entry>
    <title>文件差异对比</title>
    <url>/2024/08/27/diff-file-in-git-using-vim/</url>
    <content><![CDATA[<h1 id="文件差异对比">文件差异对比</h1>
<h2 id="git-中的对比场景">Git 中的对比场景</h2>
<p>三个区域:</p>
<ol type="1">
<li><strong>工作区</strong>(Working Directory)</li>
<li><strong>暂存区</strong>(Staged Area)</li>
<li><strong>版本库</strong>(Repository)</li>
</ol>
<p>对比场景:</p>
<ul>
<li>工作区-暂存区(默认)</li>
<li>工作区-版本库</li>
<li>暂存区-版本库</li>
<li>版本库-版本库</li>
</ul>
<h3 id="工作区-暂存区">工作区-暂存区</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作区和暂存区所有文件差异</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个文件</span></span><br><span class="line">git diff -- filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看多个文件</span></span><br><span class="line">git diff -- f1 f2 f3</span><br></pre></td></tr></table></figure>
<h3 id="工作区-版本库">工作区-版本库</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作区与最新版本库的所有差异</span></span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作区与指定版本库的所有差异</span></span><br><span class="line">git diff version-id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作区与最新版本库的某个文件差异</span></span><br><span class="line">git diff HEAD -- filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作区与最新版本库的多个文件差异</span></span><br><span class="line">git diff HEAD -- f1 f2 f3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作区与指定版本库的某个文件差异</span></span><br><span class="line">git diff version-id -- fname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作区与指定版本库的多个文件差异</span></span><br><span class="line">git diff version-id -- f1 f2 f3</span><br></pre></td></tr></table></figure>
<h3 id="暂存区-版本库">暂存区-版本库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暂存区和 HEAD 之间所有文件差异</span></span><br><span class="line">git diff --cached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存区和指定版本之间所有文件差异</span></span><br><span class="line">git diff --cached version-id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存区和 HEAD 之间指定文件差异</span></span><br><span class="line">git diff --cached -- f1 f2 f3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存区和指定版本之间某些文件差异</span></span><br><span class="line">git diff --cached version-id -- f1 f2 f3</span><br></pre></td></tr></table></figure>
<h3 id="版本库-版本库">版本库-版本库</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两个版本之间所有差异</span></span><br><span class="line">git diff version1 version2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个版本之间指定文件差异</span></span><br><span class="line">git diff version1 version2 -- f1 f2 f3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个版本之间改动的文件列表</span></span><br><span class="line">git diff version1 version2 --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个版本之间的文件夹 src 的差异</span></span><br><span class="line">git diff version1 version2 src</span><br></pre></td></tr></table></figure>
<h2 id="vim-中的-diff-mode">Vim 中的 diff-mode</h2>
<p><code>:help diff.txt</code>, <code>:help diff-mode</code>.</p>
<p>进入 diff 的两种方法:</p>
<ul>
<li><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim -d f1 f2</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">vimdiff f1 f2</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim f1</span><br><span class="line"><span class="comment"># And in Vim</span></span><br><span class="line">:vertical diffsplit f2</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Navigating and Editing:</p>
<table>
<thead>
<tr class="header">
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>]c</code></td>
<td>Jump to next change</td>
</tr>
<tr class="even">
<td><code>[c</code></td>
<td>Jump to previous change</td>
</tr>
<tr class="odd">
<td><code>dp</code></td>
<td>Difference put</td>
</tr>
<tr class="even">
<td><code>do</code></td>
<td>Difference obtain</td>
</tr>
<tr class="odd">
<td><code>:diffupdate</code></td>
<td>Re-scan the files for differences.</td>
</tr>
<tr class="even">
<td><code>ZQ</code></td>
<td>Quit without checking changes.</td>
</tr>
</tbody>
</table>
<p>Folds:</p>
<table>
<thead>
<tr class="header">
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>zo</code> / <code>zO</code></td>
<td>Open</td>
</tr>
<tr class="even">
<td><code>zc</code> / <code>zC</code></td>
<td>Close</td>
</tr>
<tr class="odd">
<td><code>za</code> / <code>zA</code></td>
<td>Toggle</td>
</tr>
<tr class="even">
<td><code>zv</code></td>
<td>Open folds for this line</td>
</tr>
<tr class="odd">
<td><code>zM</code></td>
<td>Close all</td>
</tr>
<tr class="even">
<td><code>zR</code></td>
<td>Open all</td>
</tr>
<tr class="odd">
<td><code>zm</code></td>
<td>Fold more(foldlevel+=1)</td>
</tr>
<tr class="even">
<td><code>zr</code></td>
<td>Fold less(foldlevel-=1)</td>
</tr>
<tr class="odd">
<td><code>zx</code></td>
<td>Update folds</td>
</tr>
</tbody>
</table>
<h2 id="git-与-vim-文件差异对比的集成">Git 与 Vim 文件差异对比的集成</h2>
<p><code>man git-diff</code>、<code>man git-difftool</code>.</p>
<p>配置:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global diff.tool nvimdiff</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git config --global diff.tool vimdiff</span><br><span class="line"></span><br><span class="line">git config --global difftool.prompt <span class="literal">false</span></span><br><span class="line">git config --global difftool.trustExitCode <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为 difftool 起别名, 可用 git d 替代 git difftool</span></span><br><span class="line">git config --global alias.d difftool</span><br></pre></td></tr></table></figure>
<p>使用(将上文中的<code>diff</code>换成<code>d</code>即可):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本库中最新版本的 test.txt 与工作区中 test.txt 的差异</span></span><br><span class="line">git d HEAD -- test.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
</search>
